/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

version       = '1.0-SNAPSHOT'

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.0'
}

//////////////// BUILD TASKS //////////////////////////


task alljavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

task javadocJar(type: Jar, dependsOn: alljavadoc) {
    classifier = 'javadoc'
    from alljavadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: javadocJar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

java {
    withJavadocJar()
    withSourcesJar()
}

shadowJar {
  baseName "io.github.2k16daniel-DRFClient"
  version version
}

/* uncomment this if you want to build a fat jar
*   then call the gradle task (shadowjar)
*
*    shadowJar.finalizedBy javadocJar
*    shadowJar.finalizedBy sourcesJar
*/
signing {
  required { gradle.taskGraph.hasTask("publishing") }
  sign configurations.archives
}

jar {
  manifest {
    attributes("Implementation-Title": "DRFClient", "Implementation-Version": version)
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.2k16daniel'
            artifactId = 'drfclient'
            version = version
            from components.java

            pom {
                name = 'DRFClient'
                        description = 'A simple Client library for Django rest famework'
                        url = 'https://github.com/2k16daniel/DRFClient'
                        licenses {
                            license {
                                name = 'GNU General Public License v3.0'
                                url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                                    }
                                }
                developers {
                    developer {
                        id = '2k16daniel'
                        name = 'Daniel M. Tea√±o'
                        email = '2k16daniel@gmail.com'
                    }
                }
                scm {
                        connection = 'scm:git:https://github.com/2k16daniel/DRFClient.git'
                        developerConnection = 'scm:git:https://github.com/2k16daniel/DRFClient.git'
                        url = 'https://github.com/2k16daniel/DRFClient'
                }   
            }
        }
    }

    repositories {
        maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
            credentials {
            username "$ossrhUsername"
            password "$ossrhPassword"
            }
            def releasesRepoUrl = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2')
            def snapshotsRepoUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

artifacts {
  archives shadowJar
  archives javadocJar
  archives sourcesJar
}